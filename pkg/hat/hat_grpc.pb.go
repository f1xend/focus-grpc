// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HatClient is the client API for Hat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HatClient interface {
	Rabbit(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Animals, error)
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
}

type hatClient struct {
	cc grpc.ClientConnInterface
}

func NewHatClient(cc grpc.ClientConnInterface) HatClient {
	return &hatClient{cc}
}

func (c *hatClient) Rabbit(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Animals, error) {
	out := new(Animals)
	err := c.cc.Invoke(ctx, "/hat.Hat/rabbit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hatClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/hat.Hat/healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HatServer is the server API for Hat service.
// All implementations must embed UnimplementedHatServer
// for forward compatibility
type HatServer interface {
	Rabbit(context.Context, *Number) (*Animals, error)
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	mustEmbedUnimplementedHatServer()
}

// UnimplementedHatServer must be embedded to have forward compatible implementations.
type UnimplementedHatServer struct {
}

func (UnimplementedHatServer) Rabbit(context.Context, *Number) (*Animals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rabbit not implemented")
}
func (UnimplementedHatServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedHatServer) mustEmbedUnimplementedHatServer() {}

// UnsafeHatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HatServer will
// result in compilation errors.
type UnsafeHatServer interface {
	mustEmbedUnimplementedHatServer()
}

func RegisterHatServer(s grpc.ServiceRegistrar, srv HatServer) {
	s.RegisterService(&Hat_ServiceDesc, srv)
}

func _Hat_Rabbit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HatServer).Rabbit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hat.Hat/rabbit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HatServer).Rabbit(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hat_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HatServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hat.Hat/healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HatServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hat_ServiceDesc is the grpc.ServiceDesc for Hat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hat.Hat",
	HandlerType: (*HatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rabbit",
			Handler:    _Hat_Rabbit_Handler,
		},
		{
			MethodName: "healthz",
			Handler:    _Hat_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hat.proto",
}
